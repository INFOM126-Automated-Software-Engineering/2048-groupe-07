on:
  pull_request:
    types: [synchronize, opened, reopened]

jobs:
  check-results:
    runs-on: ubuntu-latest

    steps:
      - name: Wait for all checks to complete
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha = context.payload.pull_request.head.sha;

            console.log("Waiting for all checks to complete...");
            let allChecksCompleted = false;
            let attempt = 0;
            const maxAttempts = 30;

            while (!allChecksCompleted && attempt < maxAttempts) {
              attempt++;

              // Fetch all checks for this pull request
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner,
                repo,
                ref: sha,
              });

              // Log statuses of all checks
              checkRuns.check_runs.forEach(run => {
                console.log(`Check: ${run.name}, Status: ${run.status}, Conclusion: ${run.conclusion}`);
              });

              // Check if all checks are completed
              allChecksCompleted = checkRuns.check_runs.every(
                run => run.status === "completed"
              );

              if (!allChecksCompleted) {
                console.log(`Attempt ${attempt}: Some checks are still in progress. Retrying in 10 seconds...`);
                await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10 seconds
              }
            }

            if (!allChecksCompleted) {
              console.log(`Maximum attempts reached (${maxAttempts}). Proceeding with current statuses.`);
            }

      - name: Fetch and evaluate check runs
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const prNumber = context.payload.pull_request.number;

            // Fetch all checks for this pull request
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner,
              repo,
              ref: context.payload.pull_request.head.sha,
            });

            // Check if any of the checks failed
            const failedCheck = checkRuns.check_runs.some(run => run.conclusion === "failure");

            if (failedCheck) {
              console.log(`Some checks failed for PR #${prNumber}. Adding "invalid" label.`);

              // Add the "invalid" label to the PR
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: prNumber,
                labels: ["invalid"],
              });
            } else {
              console.log(`All checks passed for PR #${prNumber}. No label added.`);
            }
